/* 
 * File:   lab.c
 * Author: paola
 *
 * Created on 25 de abril de 2022, 10:21
 */

// PIC16F887 Configuration Bit Settings
// 'C' source line config statements
// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

/*
 * LIBRERIAS
 */
#include <xc.h>
#include <stdint.h>

/*
 * CONSTANTES
 */
#define _XTAL_FREQ 8000000

/*
 * VARIABLES
 */

/*
 * PROTOTIPOS DE FUNCIONES
 */
void setup(void);               

/*
 * INTERRUPCIONES
 */
void __interrupt() isr(void) {
   if (ADIF) {     
       //Potenciometro 1
       if (ADCON0bits.CHS == 0){        // AN0 canal seleccionado?
       CCPR1L = (ADRESH>>1)+124;        //rango de (-90 a 90))
       }
       //Potenciometro 2
       else if (ADCON0bits.CHS == 1){   // AN1 canal seleccionado?
       CCPR2L = (ADRESH>>1)+124;
       ADCON0bits.CHS = 0;
       }
       PIR1bits.ADIF = 0;               //se baja la bandera
    }
}


/*
 * CICLO PRINCIPAL
 */
void main(void) {
    setup();
    while (1)
    {
        __delay_us(100);
        ADCON0bits.GO_nDONE = 1;    //se realiza la conversión
        if (ADCON0bits.CHS == 0){   //muxeo de canales
        __delay_us(50);
       ADCON0bits.CHS = 1;          //RA1 Cse configura para ADC en el poteciometro 2
        }
    }
}


/*
 * FUNCIONES
 */
void setup(void){
    
    ANSEL = 0b00000011;          //Entradas analogicas
    TRISA = 0b11111111;             
    PORTA = 0;
    ADCON0bits.CHS = 0;             
    
//Configuración ADC
    ADCON0bits.ADON = 1;        //Ese prende el módulo 
    __delay_us(100);            //RECOMENDANDO DE ACUERDO AL OSCILADOR UTILIZADO
    ADCON0bits.GO_nDONE = 1;    //COMENZAR CONVERSION
    
 
    ADCON1bits.VCFG0 = 0;   //voltaje de referencia +
    ADCON1bits.VCFG1 = 0;   //voltaje de referencia -

//Configuración de reloj 
    ADCON0bits.ADCS0 = 0;   //Fosc/32, TAD = 2us.
    ADCON0bits.ADCS1 = 1;
    ADCON1bits.ADFM = 0;    //se justifica a la izquierda

//Configuración de oscilador 
    OSCCONbits.SCS = 1;     //oscilador interno
    OSCCONbits.IRCF0 = 1;   //8 MHz
    OSCCONbits.IRCF1 = 1;   
    OSCCONbits.IRCF2 = 1;
    
//Servomotor
    PORTC = 0;              //se desactiva salida
    TRISC = 0b11111111;
    PR2 = 250;

//PWM
    CCP1CONbits.P1M = 0b00;         //configuración de bit para PWM 
    CCP2CONbits.DC2B0 = 0;          //modo PWM
    CCP2CONbits.DC2B1 = 0;
    CCP2CONbits.CCP2M = 0b1111;
    CCP1CONbits.CCP1M = 0b1100;     //ECCP 

    CCPR1L = 0x0f;                  //carga valor del periodo
    CCP1CONbits.DC1B = 0;           //bits menos significativos   
    CCPR2L = 0x0f;                  //se carga el valor del periodo
    PIR1bits.TMR2IF = 0;            //se baja la bandera del overflow

//PSA
    T2CONbits.T2CKPS1 = 1;          //PSA
    T2CONbits.TMR2ON = 1;           //habilitamos tmr2
            
            
while(PIR1bits.TMR2IF == 0);    //espera duranto un ciclo
    PIR1bits.TMR2IF = 0;
    TRISC = 0;

//Interrupciones
    INTCONbits.GIE = 1;     //habilita interrupciones globales
    INTCONbits.PEIE = 1;    //habilita periféricos
    PIR1bits.ADIF = 0;      //baja la bandera de interrupción de ADC
    PIE1bits.ADIE = 1;      //habilita interrupción de ADC

}  
